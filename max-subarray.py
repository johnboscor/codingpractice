#A = [1, 2, 3, 4, -10]
#A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
#A = [ -234, 9, -159, -137, -381, 85, -400, -329, -354, -114, 30, -357, -152, 41, -109, -354, -415, -448, -50, -453, -237, -313, -281, 44, -309, -173, -225, 22, -213, -279, -310, -97, -422, 14, -249, -247, -131, -488, -32, 76, -303, -76, -76, 60, -439, -74, -397, -417, -248, -387, -114, 9, -439, -260, -426, -381, -432, -448, -353, -163, -275, -402, 48, 10, 28, -216, -228, -16, -316, -478, -354, 74, -160, 85, -235, -350, -206, -229, -240, -455, 74, -298, -323, -161, -401, -443, -34, -95, -420, -100, -435, -27, 56, -288, -278, -132, -298, -101, 54, -185, -261, 98, -115, -362, -228, -163, -53, -92, 34, -499, -254, -18, -394, -228, -376, -384, 8, -39, -404, -485, -187, -48, -399, -440, -70, 2, 19, -359, -288, -444, 98, -426, -58, -405, -174, -376, -332, -470, -306, -487, -38, -306, -448, 8, -246, -83, -173, -239, -293, 10, -437, -12, 42, -259, -35, 89, -96, -377, -255, 34, -71, -202, 0, -386, -389, -205, -63, -359, -262, -301, -334, -151, -48, 97, -16, -380, 18, -1, 53, -5, -179, -14, -231, -496, -429, -243, 15, -212, -41, -437, -48, -145, -329, -170, -172, -28, -47, -367, -8, -359, -334, -352, -54, -398, -20, -488, 33, -485, -493, -33, -15, -240, -29, -332, -12, -271, -445, -109, -54, -245, -258, 68, -323, -492, -469, -299, -188, 28, -312, -498, -151, 21, 62, -284, -363, 20, -444, 84, -25, 46, -26, -79, -23, -230, -43, -497, -365, -70, -52, -90, -450, -269, -472, 52, -37, -342, -483, 63, 27, -76, -333, -95, -328, 69, -500, -410, 67, 83, -243, -175, -294, -76, -294, -451, -97, -462, -457, -364, -57, -243, -211, -485, -391, 62, -221, -48, -95, -252, -487, -285, -449, 40, -127, 47, -209, -255, -326, -151, -320, -56, -236, -400, -68, -322, -229, -403, -177, -379, -346, -478, -65, -6, -90, -123, -259, -270, -363, -491, -33, -328, -345, -175, -345, -475, -282, -370, -112, -143, -326, -414, -302, -166, -25, -214, -132, -186, -222, -68, -463, 84, -224, 32, -154, -54, -193, 13, -186, -314, -157, -400, -297, -165, 34, -244, 7, 42, -366, -77, -209, -252, -222, -334, 94, 92, -325, -440, 64, 70, -416, -146, -268, -475, -418, -106, -29, 73, -81, -473, -193, 2, -174, 100, 80, 23, -327, -19, -485, -108, -137, -450, -77, -140, -89, -160, -205, -202, -219, -45, -166, -486, -182, -212, -36, -93, -317, -125, -41, -399, -499, -128, -127, 88, -175, -177, -79, -365, -214, -71, -276, -159, 59, -108, 60, 10, -135, -153, 59, 20, -84, -158, -344, -149, -93, -328, -415, -21, -191, -122, 78, -225, -250, -143, -211, 27, 34, 26, -135, -134, -422, -176, -264, -175, -96, 77, -108, 29, 7, -32, -402, -259, -345, -134, -495, -120, -374, -339, -110, -307, -299, -217, -93, -49, -465, -105, -311, 17, -243, -88, -53, -170, -192, -7, -128, -381, -106, -397, -187, -300, -15, -326, -162, 62, 6, -256, -124, -233, -174, -330, -121, -276, -491, 41, -137, -84, -424, -301, -63, -187, -11, 22, -87, -308, -20, 32, -488, -390, -169, -202, -452, -189, -433, -311, -20, -183, -263, -60, -21, -362, -103, -222, -186, -216, -291, -374, 69, -111, -408, -52, -266, -384, -205, -124, -150, 49, -2, -120, -497, 91, -2, 67, 90, 79, -278, -64, -238, -426, -238, -242, -374, -425, 29, -166, -352, -131, -27, -478, -81, -417, -288, -56, 37, -92, -422, -294, 17, -395, 14, -424, -236, -105, -245, -371, -421, -419, -57, -173, -51, -265, -371, -173, -489, -320, -491, -399, -21, -183, -280, 35, -14, -416, -482, -459, -315, 86, -162, -288, -191, -211, -193, -176, -39, -471, -58, -106, -296, -87, -125, -464, -383, -252, -280, -303, -76, -138, -248, -302, 53, -206, 31, -109, 63, -211, -102, -205, -65, -483, -455, -274, -419, -75, 88, -361, -251, -249, -475, -343, -300, -410, -372, -153, -302, -174, 31, -141, -407, -322, -50, -43, -450, 93, -462, -250, -376, -500, 61, -371, -446, 100, -156, -330, -38, -92, -5, -38, -58, 100, -326, -37, -272, -81, -36, -230, -299, 47, -273, -278, -227, -245, -360, 46, 19, -425, -425, -478, -104, -187, -317, 65, 29, -107, -445, -395, 74, 31, -133, 36, 96, -288, -124, -379, 70, -115, -39, -145, -210, -143, -136, -66, -475, -13, -158, 80, -415, -447, -211, -499, -189, -203, -140, -482, 36, -263, -442, 3, -433, -418, -44, -374, -295, -132, -156, -72, -460, -15, 100, -209, -142, -261, 94, 75, -116, -54, -232, -438, 93, -382, -405, -79, -26, -419, -55, 72, -89, 66, 79, -90, -7, -114, -9, -79, -166, -37, -357, -87, -427, -456, -224, -123, -292, 4, -459, -124, -303, -191, -198, -184, -232, -75, -125, -474, -54, -133, -464, 90, 28, -300, -332, -244, 64, 63, -89, 81, -410, -236, -62, 39, -486, -198, -289, -168, -71, -97, -103, 44, -313, -189, -21, -221, -439, -282, -134, -204, -292, -459, -278, 79, -98, 12, -286, -411, -138, -279, 21, -357, -343, -499, -280, 93, -6, -485, -145, -52, -42, -295, -483, -196, -8, -458, -481, -43, -222, 91, 95, -139, -111, -364, 4, -315, -75, -289, -145, -177, -115, -166, -368, -468, 13, -474, -219, 21, -53, -464, -167, -174, -454, -47, -148, -322, 45, 53, -281, 72, -468, -369, -390, -133, -499 ]
#A = [ -120, -202, -293, -60, -261, -67, 10, 82, -334, -393, -428, -182, -138, -167, -465, -347, -39, -51, -61, -491, -216, -36, -281, -361, -271, -368, -122, -114, -53, -488, -327, -182, -221, -381, -431, -161, -59, -494, -406, -298, -268, -425, -88, -320, -371, -5, 36, 89, -194, -140, -278, -65, -38, -144, -407, -235, -426, -219, 62, -299, 1, -454, -247, -146, 24, 2, -59, -389, -77, -19, -311, 18, -442, -186, -334, 41, -84, 21, -100, 65, -491, 94, -346, -412, -371, 89, -56, -365, -249, -454, -226, -473, 91, -412, -30, -248, -36, -95, -395, -74, -432, 47, -259, -474, -409, -429, -215, -102, -63, 80, 65, 63, -452, -462, -449, 87, -319, -156, -82, 30, -102, 68, -472, -463, -212, -267, -302, -471, -245, -165, 43, -288, -379, -243, 35, -288, 62, 23, -444, -91, -24, -110, -28, -305, -81, -169, -348, -184, 79, -262, 13, -459, -345, 70, -24, -343, -308, -123, -310, -239, 83, -127, -482, -179, -11, -60, 35, -107, -389, -427, -210, -238, -184, 90, -211, -250, -147, -272, 43, -99, 87, -267, -270, -432, -272, -26, -327, -409, -353, -475, -210, -14, -145, -164, -300, -327, -138, -408, -421, -26, -375, -263, 7, -201, -22, -402, -241, 67, -334, -452, -367, -284, -95, -122, -444, -456, -152, 25, 21, 61, -320, -87, 98, 16, -124, -299, -415, -273, -200, -146, -437, -457, 75, 84, -233, -54, -292, -319, -99, -28, -97, -435, -479, -255, -234, -447, -157, 82, -450, 86, -478, -58, 9, -500, -87, 29, -286, -378, -466, 88, -366, -425, -38, -134, -184, 32, -13, -263, -371, -246, 33, -41, -192, -14, -311, -478, -374, -186, -353, -334, -265, -169, -418, 63, 77, 77, -197, -211, -276, -190, -68, -184, -185, -235, -31, -465, -297, -277, -456, -181, -219, -329, 40, -341, -476, 28, -313, -78, -165, -310, -496, -450, -318, -483, -22, -84, 83, -185, -140, -62, -114, -141, -189, -395, -63, -359, 26, -318, 86, -449, -419, -2, 81, -326, -339, -56, -123, 10, -463, 41, -458, -409, -314, -125, -495, -256, -388, 75, 40, -37, -449, -485, -487, -376, -262, 57, -321, -364, -246, -330, -36, -473, -482, -94, -63, -414, -159, -200, -13, -405, -268, -455, -293, -298, -416, -222, -207, -473, -377, -167, 56, -488, -447, -206, -215, -176, 76, -304, -163, -28, -210, -18, -484, 45, 10, 79, -441, -197, -16, -145, -422, -124, 79, -464, -60, -214, -457, -400, -36, 47, 8, -151, -489, -327, 85, -297, -395, -258, -31, -56, -500, -61, -18, -474, -426, -162, -79, 25, -361, -88, -241, -225, -367, -440, -200, 38, -248, -429, -284, -23, 19, -220, -105, -81, -269, -488, -204, -28, -138, 39, -389, 40, -263, -297, -400, -158, -310, -270, -107, -336, -164, 36, 11, -192, -359, -136, -230, -410, -66, 67, -396, -146, -158, -264, -13, -15, -425, 58, -25, -241, 85, -82, -49, -150, -37, -493, -284, -107, 93, -183, -60, -261, -310, -380 ]
A = [ -90, 10, -30, -40, -50 ]
#A=[-1,-3,-4,0]
#A = [ 1, 2, 5, -7, 2, 5 ]
#A = [2, 5, -7, 2, 5 ]
#A = [10, -1, 2, 3, -4, 100]


def max_sub_brute(A):
    max_val=0
    for i in range(len(A)):
        for j in range(i,len(A)):
            sum_val=sum(A[i:j])
            if sum_val >= max_val:
                max_val = sum_val
                #max_sub_arr = A[i:j]
    return max_val

def max_sub_kadane_method(A): #[-2, 1, -3, 4, -1, 2, 1, -5, 4]
    if len(A) == 1:  # if only one element, then return the element
        return A[0]

    possitive_found = False  # if list has only -ve elements, return max of -ve element
    for i in range(len(A)):
        if(A[i] > 0):
            posstive_found = True
            break
    if not possitive_found:
        return max(A)

    max_sum = 0
    curr_sum = 0
    for i in range(len(A)):
        curr_sum += A[i]
        max_sum = max(max_sum, curr_sum)
        if curr_sum < 0:
            curr_sum = 0
    return max_sum


#print(max_sub_brute(A))
print(max_sub_kadane_method(A))

